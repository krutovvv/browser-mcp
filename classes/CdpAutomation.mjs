import sharp from 'sharp'

// CdpAutomation.mjs
let currentMouseX = 0;
let currentMouseY = 0;

export class CdpAutomation {
  #cdpEndpoint; // Private field to store the endpoint

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CdpAutomation.
   * @param {string} cdpEndpoint URL-–∞–¥—Ä–µ—Å –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ CDP (–Ω–∞–ø—Ä–∏–º–µ—Ä, "http://192.168.88.100:9223").
   */
  constructor(cdpEndpoint) {
    if (!cdpEndpoint) {
      throw new Error(
        "CDP Endpoint must be provided to CdpAutomation constructor.",
      );
    }
    this.#cdpEndpoint = cdpEndpoint;
  }

  /**
   * –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ CDP.
   * @param {string} method –ú–µ—Ç–æ–¥ CDP –¥–ª—è –≤—ã–∑–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Page.navigate", "Input.dispatchMouseEvent").
   * @param {object} params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ CDP.
   * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ CDP.
   * @throws {Error} –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å CDP –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω–µ—É–¥–∞—á–µ–π.
   */
  async cdpRequest(method, params) {
    const response = await fetch(this.#cdpEndpoint, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ method, params }),
    });

    const json = await response.json();
    if (json.error) {
      const errorMessage = json.error.message || JSON.stringify(json.error);
      console.error(`‚ùå CDP Error for method ${method}: ${errorMessage}`);
      throw new Error(`CDP Error for method ${method}: ${errorMessage}`);
    }
    return json.result;
  }

  /**
   * // –ò–ó–ú–ï–ù–ï–ù–û: –ú–µ—Ç–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–¥–µ–ª–∞–Ω –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º.
   * –ù–∞–≤–∏–≥–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.
   * @param {string} url URL –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
   * @param {number} [timeout=10000] –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –º—Å.
   * @returns {Promise<void>}
   */
  async navigate(url, timeout = 10000) {
    console.log(`üåê –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ URL: ${url}...`);

    const navigationPromise = this.cdpRequest("Page.navigate", { url });

    const loadPromise = (async () => {
      // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è SPA: –µ—Å–ª–∏ —Ç–µ–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—á—Ç–∏ –ø—É—Å—Ç–æ–µ, –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ.
      // –≠—Ç–æ –¥–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ JavaScript.
      const { result } = await this.cdpRequest("Runtime.evaluate", {
        expression: "document.body.innerHTML.length",
        returnByValue: true,
      });

      if (result.value < 250) { // 250 –±–∞–π—Ç - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ "–º–∞–ª–µ–Ω—å–∫–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ
        console.log("‚è≥ Body content is small, waiting for potential SPA render...");
        await new Promise(resolve => setTimeout(resolve, 3000)); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫
      }
    })();

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å –æ–±—â–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      await Promise.race([
        Promise.all([navigationPromise, loadPromise]),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error(`Navigation to ${url} timed out after ${timeout / 1000}s`)), timeout)
        ),
      ]);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ ${url} –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ ${url}:`, error.message);
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç, —Å—á–∏—Ç–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —É—Å–ª–æ–≤–Ω–æ —É—Å–ø–µ—à–Ω–æ–π, –Ω–æ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
      if (error.message.includes("timed out")) {
        console.warn(`‚ö†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ø–æ —Ç–∞–π–º–∞—É—Ç—É, –Ω–æ –ø–µ—Ä–µ—Ö–æ–¥ –º–æ–≥ –ø—Ä–æ–∏–∑–æ–π—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.`);
        return;
      }
      throw error;
    }
  }
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ CdpAutomation –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
  // —Ç–∞–∫ –∫–∞–∫ –∏—Ö –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∏–∑ InteractiveElementSelector.
  // ... (waitForElement, clickElement, typeText, scrollPage, getCookiesCdp, getLocalStorageCdp, takeScreenshotBase64)
  // ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ CdpAutomation –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  /**
   * –ñ–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É.
   * @param {string} selector CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞.
   * @param {number} timeout –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
   * @returns {Promise<void>}
   */
  async waitForElement(selector, timeout = 5000) {
    console.log(
      `‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" (—Ç–∞–π–º–∞—É—Ç: ${timeout}–º—Å)...`,
    );
    const startTime = Date.now();
    while (Date.now() - startTime < timeout) {
      try {
        const { result } = await this.cdpRequest("Runtime.evaluate", {
          expression: `document.querySelector('${selector}')`,
          returnByValue: false,
        });
        if (result.objectId) {
          console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç "${selector}" –Ω–∞–π–¥–µ–Ω.`);
          return;
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ç.–∫. –µ–≥–æ –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ –±—ã—Ç—å
      }
      await new Promise((resolve) => setTimeout(resolve, 100)); // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    }
    throw new Error(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ "${selector}".`);
  }

  /**
   * –ö–ª–∏–∫–∞–µ—Ç –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏.
   * @param {string} selector CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–ª–∏–∫–∞.
   * @param {object} [options] –û–ø—Ü–∏–∏ –∫–ª–∏–∫–∞.
   * @param {number} [options.maxOffset=5] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞.
   * @param {number} [options.preClickDelayMin=50] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º.
   * @param {number} [options.preClickDelayMax=200] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º.
   * @param {number} [options.pressReleaseDelayMin=30] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏.
   * @param {number} [options.pressReleaseDelayMax=100] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏.
   * @param {number} [options.clickCount=1] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ (1 –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ, 2 –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ, 3 –¥–ª—è —Ç—Ä–æ–π–Ω–æ–≥–æ). // ADDED
   * @returns {Promise<void>}
   */
  async clickElement(selector, options = {}) {
    const {
      maxOffset = 5,
      preClickDelayMin = 50,
      preClickDelayMax = 200,
      pressReleaseDelayMin = 30,
      pressReleaseDelayMax = 100,
      clickCount = 1, // ADDED
    } = options;

    console.log(`üñ±Ô∏è –ö–ª–∏–∫${clickCount > 1 ? ` (${clickCount}x)` : ''} –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}"...`);
    try {
      // –ü–æ–ª—É—á–∞–µ–º nodeId —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      const { root: { nodeId: documentNodeId } } = await this.cdpRequest('DOM.getDocument');

      const { nodeId } = await this.cdpRequest("DOM.querySelector", {
        nodeId: documentNodeId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π nodeId –¥–æ–∫—É–º–µ–Ω—Ç–∞
        selector: selector,
      });

      if (!nodeId) {
        throw new Error(`–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      }

      const { model } = await this.cdpRequest("DOM.getBoxModel", {
        nodeId: nodeId,
      });

      if (!model) {
        throw new Error(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∫–æ—Ä–æ–±–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ "${selector}".`,
        );
      }

      const contentBox = model.content;
      const x = (contentBox[0] + contentBox[2]) / 2; // –¶–µ–Ω—Ç—Ä X
      const y = (contentBox[1] + contentBox[5]) / 2; // –¶–µ–Ω—Ç—Ä Y

      const targetX = x + (Math.random() - 0.5) * 2 * maxOffset;
      const targetY = y + (Math.random() - 0.5) * 2 * maxOffset;

      await this.cdpRequest("Input.dispatchMouseEvent", {
        type: "mouseMoved",
        x: targetX,
        y: targetY,
      });
      currentMouseX = targetX;
      currentMouseY = targetY;

      await new Promise((resolve) =>
        setTimeout(
          resolve,
          Math.random() * (preClickDelayMax - preClickDelayMin) +
            preClickDelayMin,
        ),
      );

      await this.cdpRequest("Input.dispatchMouseEvent", {
        type: "mousePressed",
        x: targetX,
        y: targetY,
        button: "left",
        clickCount: clickCount,
      });

      await new Promise((resolve) =>
        setTimeout(
          resolve,
          Math.random() * (pressReleaseDelayMax - pressReleaseDelayMin) +
            pressReleaseDelayMin,
        ),
      );

      await this.cdpRequest("Input.dispatchMouseEvent", {
        type: "mouseReleased",
        x: targetX,
        y: targetY,
        button: "left",
        clickCount: clickCount,
      });
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–ª–∏–∫–Ω—É–ª–∏${clickCount > 1 ? ` (${clickCount}x)` : ''} –ø–æ "${selector}".`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ "${selector}":`, error.message);
      throw error;
    }
  }

  /**
   * –í–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
   * @param {string} text –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞.
   * @param {object} [options] –û–ø—Ü–∏–∏ –≤–≤–æ–¥–∞.
   * @param {number} [options.charDelayMin=50] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏.
   * @param {number} [options.charDelayMax=150] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏.
   * @returns {Promise<void>}
   */
  async typeText(text, options = {}) {
    const { charDelayMin = 50, charDelayMax = 150 } = options;
    console.log(`‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: "${text}"...`);
    try {
      for (const char of text) {
        await this.cdpRequest("Input.dispatchKeyEvent", {
          type: "char",
          text: char,
          unmodifiedText: char,
        });
        await new Promise((resolve) =>
          setTimeout(
            resolve,
            Math.random() * (charDelayMax - charDelayMin) + charDelayMin,
          ),
        );
      }
      console.log(`‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω.`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞:`, error.message);
      throw error;
    }
  }

  JavaScript
// CdpAutomation.mjs
// ... (–Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –∏–º–ø–æ—Ä—Ç—ã, currentMouseX, currentMouseY, CdpAutomation constructor)

  // ... (–º–µ—Ç–æ–¥—ã cdpRequest, navigate, waitForElement, clickElement, typeText)

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
   * @param {number|'screenDown'|'screenUp'|'end'|'start'} scrollAmount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏,
   * 'screenDown' –¥–ª—è –æ–¥–Ω–æ–π –≤—ã—Å–æ—Ç—ã –æ–∫–Ω–∞ –≤–Ω–∏–∑, 'screenUp' –¥–ª—è –æ–¥–Ω–æ–π –≤—ã—Å–æ—Ç—ã –æ–∫–Ω–∞ –≤–≤–µ—Ä—Ö,
   * 'end' –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞, 'start' –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –Ω–∞—á–∞–ª–æ.
   * @param {object} [options] –û–ø—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.
   * @param {number} [options.scrollDelta=120] –î–µ–ª—å—Ç–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω "—Ç–∏–∫" –∫–æ–ª–µ—Å–∞ –º—ã—à–∏.
   * @param {number} [options.delayPerTickMin=50] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É "—Ç–∏–∫–∞–º–∏" –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.
   * @param {number} [options.delayPerTickMax=150] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É "—Ç–∏–∫–∞–º–∏" –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.
   * @returns {Promise<void>}
   */
  async scrollPage(scrollAmount, options = {}) {
    const {
      scrollDelta = 120,
      delayPerTickMin = 50,
      delayPerTickMax = 150,
    } = options;
    console.log(`‚ÜïÔ∏è –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ ${scrollAmount}...`);
    try {
      const { layoutViewport } = await this.cdpRequest("Page.getLayoutMetrics");
      const viewportHeight = layoutViewport.clientHeight;
      const viewportWidth = layoutViewport.clientWidth;

      const { result: scrollResult } = await this.cdpRequest("Runtime.evaluate", {
          expression: `JSON.stringify({
              scrollY: window.scrollY,
              scrollHeight: document.documentElement.scrollHeight
          })`,
          returnByValue: true,
      });
      const { scrollY, scrollHeight } = JSON.parse(scrollResult.value);


      if (scrollAmount === "screenDown") {
        scrollAmount = viewportHeight;
      } else if (scrollAmount === "screenUp") {
        scrollAmount = -viewportHeight;
      } else if (scrollAmount === "end") {
        scrollAmount = scrollHeight - scrollY - viewportHeight;
        if (scrollAmount <= 0) {
          console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –≤–Ω–∏–∑—É –∏–ª–∏ –Ω–µ—á–µ–≥–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å.");
          return;
        }
      } else if (scrollAmount === "start") {
          scrollAmount = -scrollY;
          if (scrollAmount === 0) {
              console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –≤ –Ω–∞—á–∞–ª–µ.");
              return;
          }
      }

      let totalScrolled = 0;
      const absScrollAmount = Math.abs(scrollAmount);
      const direction = scrollAmount >= 0 ? 1 : -1;

      const mouseX = currentMouseX || viewportWidth / 2;
      const mouseY = currentMouseY || viewportHeight / 2;

      while (totalScrolled < absScrollAmount) {
        let deltaY = Math.min(scrollDelta, absScrollAmount - totalScrolled);
        deltaY *= direction;

        await this.cdpRequest("Input.dispatchMouseEvent", {
          type: "mouseWheel",
          x: mouseX,
          y: mouseY,
          deltaX: 0,
          deltaY: deltaY,
        });
        totalScrolled += Math.abs(deltaY);
        await new Promise((resolve) =>
          setTimeout(
            resolve,
            Math.random() * (delayPerTickMax - delayPerTickMin) +
              delayPerTickMin,
          ),
        );
      }
      console.log(`‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`, error.message);
      throw error;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫—É–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –¥–æ–º–µ–Ω—É.
   * @param {string} [domain] –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫—É–∫–∏.
   * @returns {Promise<Array<object>>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É–∫–∏.
   */
  async getCookiesCdp(domain) {
    console.log(
      `üç™ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É–∫–∏ ${domain ? `–¥–ª—è –¥–æ–º–µ–Ω–∞ "${domain}"` : "–≤—Å–µ—Ö –∫—É–∫–∏"}...`,
    );
    try {
      const { cookies } = await this.cdpRequest("Network.getCookies");

      if (domain) {
        const filteredCookies = cookies.filter((cookie) =>
          cookie.domain.includes(domain),
        );
        console.log(
          `‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredCookies.length} –∫—É–∫–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞ "${domain}".`,
        );
        return filteredCookies;
      }
      console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${cookies.length} –∫—É–∫–∏.`);
      return cookies;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫—É–∫–∏:", error.message);
      return [];
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞.
   * @returns {Promise<Array<Array<string>>>} –ú–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ] –∏–∑ localStorage.
   */
  async getLocalStorageCdp() {
    console.log(
      `üíæ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞...`,
    );
    try {
        await this.cdpRequest("DOMStorage.enable");
        const { result: { value: securityOrigin } } = await this.cdpRequest("Runtime.evaluate", {
            expression: "window.location.origin",
            returnByValue: true,
        });

        if (!securityOrigin) {
            await this.cdpRequest("DOMStorage.disable");
            throw new Error("Could not determine the security origin of the page.");
        }

        const { items } = await this.cdpRequest("DOMStorage.getDOMStorageItems", {
            storageId: { securityOrigin: securityOrigin, isLocalStorage: true },
        });

        console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ localStorage –¥–ª—è ${securityOrigin}.`);
        await this.cdpRequest("DOMStorage.disable");
        return items;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:", error.message);
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ DOMStorage –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try {
            await this.cdpRequest("DOMStorage.disable");
        } catch (disableError) {
            console.error("Failed to disable DOMStorage on error:", disableError.message);
        }
        return [];
    }
  }


  /**
   * –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç sharp –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–æ 1024px –ø–æ —à–∏—Ä–∏–Ω–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.
   * @param {"png"|"jpeg"|"webp"} [format="png"] –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (png, jpeg, webp).
   * @param {number} [quality=80] –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ jpeg –∏ webp (–æ—Ç 0 –¥–æ 100).
   * @returns {Promise<string|null>} –°—Ç—Ä–æ–∫–∞ Base64 —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
   */
  async takeScreenshotBase64(format = "jpeg", quality = 80) {
    console.log(
      `üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()} –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ (max 1024px width, quality ${quality})...`, // LOG MODIFIED
    );
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ CDP (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∞, sharp —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç)
      const cdpParams = {
        format: 'png', // –í—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º PNG –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è sharp
        encoding: "base64",
      };
      const { data } = await this.cdpRequest("Page.captureScreenshot", cdpParams);

      // 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Base64 –≤ –±—É—Ñ–µ—Ä –¥–ª—è Sharp
      const imageBuffer = Buffer.from(data, 'base64');

      let processedImageBuffer;
      let sharpInstance = sharp(imageBuffer);

      // 3. –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ 1024px –ø–æ —à–∏—Ä–∏–Ω–µ
      sharpInstance = sharpInstance.resize({ width: 1024, fit: 'inside' });

      // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –∫–∞—á–µ—Å—Ç–≤–æ
      switch (format) {
        case 'jpeg':
          processedImageBuffer = await sharpInstance.jpeg({ quality: quality }).toBuffer();
          break;
        case 'webp':
          processedImageBuffer = await sharpInstance.webp({ quality: quality }).toBuffer();
          break;
        case 'png': // PNG –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ sharp –¥–ª—è —Ä–µ—Å–∞–π–∑–∞
          processedImageBuffer = await sharpInstance.png().toBuffer();
          break;
        default:
          console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "${format}". –ò—Å–ø–æ–ª—å–∑—É–µ–º 'jpeg'.`);
          processedImageBuffer = await sharpInstance.jpeg({ quality: quality }).toBuffer();
          format = 'jpeg'; // –û–±–Ω–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª–æ–≥–∞
      }

      // 5. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ –≤ Base64
      const processedBase64 = processedImageBuffer.toString('base64');

      console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}.`);
      return processedBase64;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", error.message); // LOG MODIFIED
      return null;
    }
  }

  /**
   * Presses a specific key with more comprehensive key event parameters.
   * @param {string} keyName The key to press (e.g., 'Enter', 'Escape').
   * @returns {Promise<void>}
   */
  async pressKey(keyName) {

    let keyData = {
      key: keyName,
      text: '',
      code: '',
      windowsVirtualKeyCode: 0,
    };

    switch (keyName) {
      case 'Enter':
        keyData.code = 'Enter';
        keyData.windowsVirtualKeyCode = 13;
        break;
      case 'Escape':
        keyData.code = 'Escape';
        keyData.windowsVirtualKeyCode = 27;
        break;
      case 'Backspace':
        keyData.code = 'Backspace';
        keyData.windowsVirtualKeyCode = 8;
        break;
      default:
        keyData.text = keyName;
        console.warn(`‚å®Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–ª–∞–≤–∏—à—É: '${keyName}'. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`);
    }

    try {
      // Key Down event
      await this.cdpRequest("Input.dispatchKeyEvent", {
        type: "keyDown",
        modifiers: 0, // No modifiers (Shift, Ctrl, Alt)
        ...keyData,
      });

      // Optional: Add a small delay between key down and key up for more realism
      await new Promise(resolve => setTimeout(resolve, 50));

      // Key Up event
      await this.cdpRequest("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: 0,
        ...keyData,
      });
      console.log(`‚å®Ô∏è –£—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞–ª–∏ –∫–ª–∞–≤–∏—à—É ${keyName}.`); // Updated success log
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ ${keyName}:`, error.message); // Updated error log
      throw error;
    }
  }

  /**
   * Clears the content of an input field by triple-clicking and pressing Backspace.
   * @param {string} selector CSS-selector of the input field to clear.
   * @returns {Promise<void>}
   */
  async clearInputField(selector) {
    console.log(`üßπ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}"...`);
    try {
      // Triple-click to select all content
      await this.clickElement(selector, { clickCount: 3 });

      // Press Backspace to delete selected content
      await this.pressKey('Backspace');
      console.log(`‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ "${selector}":`, error.message);
      throw error;
    }
  }
}